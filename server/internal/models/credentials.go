// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Credential is an object representing the database table.
type Credential struct {
	CredID          []byte      `boil:"cred_id" json:"cred_id" toml:"cred_id" yaml:"cred_id"`
	UserID          int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	WebauthnUserID  []byte      `boil:"webauthn_user_id" json:"webauthn_user_id" toml:"webauthn_user_id" yaml:"webauthn_user_id"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LastUsed        null.Time   `boil:"last_used" json:"last_used,omitempty" toml:"last_used" yaml:"last_used,omitempty"`
	Aaguid          null.Bytes  `boil:"aaguid" json:"aaguid,omitempty" toml:"aaguid" yaml:"aaguid,omitempty"`
	AttestationType null.String `boil:"attestation_type" json:"attestation_type,omitempty" toml:"attestation_type" yaml:"attestation_type,omitempty"`
	Attachment      string      `boil:"attachment" json:"attachment" toml:"attachment" yaml:"attachment"`
	Transport       string      `boil:"transport" json:"transport" toml:"transport" yaml:"transport"`
	SignCount       int         `boil:"sign_count" json:"sign_count" toml:"sign_count" yaml:"sign_count"`
	CloneWarning    bool        `boil:"clone_warning" json:"clone_warning" toml:"clone_warning" yaml:"clone_warning"`
	Present         bool        `boil:"present" json:"present" toml:"present" yaml:"present"`
	Verified        bool        `boil:"verified" json:"verified" toml:"verified" yaml:"verified"`
	BackupEligible  bool        `boil:"backup_eligible" json:"backup_eligible" toml:"backup_eligible" yaml:"backup_eligible"`
	BackupState     bool        `boil:"backup_state" json:"backup_state" toml:"backup_state" yaml:"backup_state"`
	PublicKey       []byte      `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`

	R *credentialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L credentialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CredentialColumns = struct {
	CredID          string
	UserID          string
	WebauthnUserID  string
	CreatedAt       string
	LastUsed        string
	Aaguid          string
	AttestationType string
	Attachment      string
	Transport       string
	SignCount       string
	CloneWarning    string
	Present         string
	Verified        string
	BackupEligible  string
	BackupState     string
	PublicKey       string
}{
	CredID:          "cred_id",
	UserID:          "user_id",
	WebauthnUserID:  "webauthn_user_id",
	CreatedAt:       "created_at",
	LastUsed:        "last_used",
	Aaguid:          "aaguid",
	AttestationType: "attestation_type",
	Attachment:      "attachment",
	Transport:       "transport",
	SignCount:       "sign_count",
	CloneWarning:    "clone_warning",
	Present:         "present",
	Verified:        "verified",
	BackupEligible:  "backup_eligible",
	BackupState:     "backup_state",
	PublicKey:       "public_key",
}

var CredentialTableColumns = struct {
	CredID          string
	UserID          string
	WebauthnUserID  string
	CreatedAt       string
	LastUsed        string
	Aaguid          string
	AttestationType string
	Attachment      string
	Transport       string
	SignCount       string
	CloneWarning    string
	Present         string
	Verified        string
	BackupEligible  string
	BackupState     string
	PublicKey       string
}{
	CredID:          "credentials.cred_id",
	UserID:          "credentials.user_id",
	WebauthnUserID:  "credentials.webauthn_user_id",
	CreatedAt:       "credentials.created_at",
	LastUsed:        "credentials.last_used",
	Aaguid:          "credentials.aaguid",
	AttestationType: "credentials.attestation_type",
	Attachment:      "credentials.attachment",
	Transport:       "credentials.transport",
	SignCount:       "credentials.sign_count",
	CloneWarning:    "credentials.clone_warning",
	Present:         "credentials.present",
	Verified:        "credentials.verified",
	BackupEligible:  "credentials.backup_eligible",
	BackupState:     "credentials.backup_state",
	PublicKey:       "credentials.public_key",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var CredentialWhere = struct {
	CredID          whereHelper__byte
	UserID          whereHelperint
	WebauthnUserID  whereHelper__byte
	CreatedAt       whereHelpertime_Time
	LastUsed        whereHelpernull_Time
	Aaguid          whereHelpernull_Bytes
	AttestationType whereHelpernull_String
	Attachment      whereHelperstring
	Transport       whereHelperstring
	SignCount       whereHelperint
	CloneWarning    whereHelperbool
	Present         whereHelperbool
	Verified        whereHelperbool
	BackupEligible  whereHelperbool
	BackupState     whereHelperbool
	PublicKey       whereHelper__byte
}{
	CredID:          whereHelper__byte{field: "\"credentials\".\"cred_id\""},
	UserID:          whereHelperint{field: "\"credentials\".\"user_id\""},
	WebauthnUserID:  whereHelper__byte{field: "\"credentials\".\"webauthn_user_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"credentials\".\"created_at\""},
	LastUsed:        whereHelpernull_Time{field: "\"credentials\".\"last_used\""},
	Aaguid:          whereHelpernull_Bytes{field: "\"credentials\".\"aaguid\""},
	AttestationType: whereHelpernull_String{field: "\"credentials\".\"attestation_type\""},
	Attachment:      whereHelperstring{field: "\"credentials\".\"attachment\""},
	Transport:       whereHelperstring{field: "\"credentials\".\"transport\""},
	SignCount:       whereHelperint{field: "\"credentials\".\"sign_count\""},
	CloneWarning:    whereHelperbool{field: "\"credentials\".\"clone_warning\""},
	Present:         whereHelperbool{field: "\"credentials\".\"present\""},
	Verified:        whereHelperbool{field: "\"credentials\".\"verified\""},
	BackupEligible:  whereHelperbool{field: "\"credentials\".\"backup_eligible\""},
	BackupState:     whereHelperbool{field: "\"credentials\".\"backup_state\""},
	PublicKey:       whereHelper__byte{field: "\"credentials\".\"public_key\""},
}

// CredentialRels is where relationship names are stored.
var CredentialRels = struct {
	User string
}{
	User: "User",
}

// credentialR is where relationships are stored.
type credentialR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*credentialR) NewStruct() *credentialR {
	return &credentialR{}
}

func (r *credentialR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// credentialL is where Load methods for each relationship are stored.
type credentialL struct{}

var (
	credentialAllColumns            = []string{"cred_id", "user_id", "webauthn_user_id", "created_at", "last_used", "aaguid", "attestation_type", "attachment", "transport", "sign_count", "clone_warning", "present", "verified", "backup_eligible", "backup_state", "public_key"}
	credentialColumnsWithoutDefault = []string{"cred_id", "user_id", "webauthn_user_id", "attachment", "public_key"}
	credentialColumnsWithDefault    = []string{"created_at", "last_used", "aaguid", "attestation_type", "transport", "sign_count", "clone_warning", "present", "verified", "backup_eligible", "backup_state"}
	credentialPrimaryKeyColumns     = []string{"cred_id"}
	credentialGeneratedColumns      = []string{}
)

type (
	// CredentialSlice is an alias for a slice of pointers to Credential.
	// This should almost always be used instead of []Credential.
	CredentialSlice []*Credential

	credentialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	credentialType                 = reflect.TypeOf(&Credential{})
	credentialMapping              = queries.MakeStructMapping(credentialType)
	credentialPrimaryKeyMapping, _ = queries.BindMapping(credentialType, credentialMapping, credentialPrimaryKeyColumns)
	credentialInsertCacheMut       sync.RWMutex
	credentialInsertCache          = make(map[string]insertCache)
	credentialUpdateCacheMut       sync.RWMutex
	credentialUpdateCache          = make(map[string]updateCache)
	credentialUpsertCacheMut       sync.RWMutex
	credentialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single credential record from the query.
func (q credentialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Credential, error) {
	o := &Credential{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for credentials")
	}

	return o, nil
}

// All returns all Credential records from the query.
func (q credentialQuery) All(ctx context.Context, exec boil.ContextExecutor) (CredentialSlice, error) {
	var o []*Credential

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Credential slice")
	}

	return o, nil
}

// Count returns the count of all Credential records in the query.
func (q credentialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count credentials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q credentialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if credentials exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Credential) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (credentialL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCredential interface{}, mods queries.Applicator) error {
	var slice []*Credential
	var object *Credential

	if singular {
		var ok bool
		object, ok = maybeCredential.(*Credential)
		if !ok {
			object = new(Credential)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCredential)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCredential))
			}
		}
	} else {
		s, ok := maybeCredential.(*[]*Credential)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCredential)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCredential))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &credentialR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &credentialR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Credentials = append(foreign.R.Credentials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Credentials = append(foreign.R.Credentials, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the credential to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Credentials.
func (o *Credential) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"credentials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, credentialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CredID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &credentialR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Credentials: CredentialSlice{o},
		}
	} else {
		related.R.Credentials = append(related.R.Credentials, o)
	}

	return nil
}

// Credentials retrieves all the records using an executor.
func Credentials(mods ...qm.QueryMod) credentialQuery {
	mods = append(mods, qm.From("\"credentials\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"credentials\".*"})
	}

	return credentialQuery{q}
}

// FindCredential retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCredential(ctx context.Context, exec boil.ContextExecutor, credID []byte, selectCols ...string) (*Credential, error) {
	credentialObj := &Credential{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"credentials\" where \"cred_id\"=$1", sel,
	)

	q := queries.Raw(query, credID)

	err := q.Bind(ctx, exec, credentialObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from credentials")
	}

	return credentialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Credential) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no credentials provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(credentialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	credentialInsertCacheMut.RLock()
	cache, cached := credentialInsertCache[key]
	credentialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			credentialAllColumns,
			credentialColumnsWithDefault,
			credentialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(credentialType, credentialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(credentialType, credentialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"credentials\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"credentials\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into credentials")
	}

	if !cached {
		credentialInsertCacheMut.Lock()
		credentialInsertCache[key] = cache
		credentialInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Credential.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Credential) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	credentialUpdateCacheMut.RLock()
	cache, cached := credentialUpdateCache[key]
	credentialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			credentialAllColumns,
			credentialPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("models: unable to update credentials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"credentials\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, credentialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(credentialType, credentialMapping, append(wl, credentialPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update credentials row")
	}

	if !cached {
		credentialUpdateCacheMut.Lock()
		credentialUpdateCache[key] = cache
		credentialUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q credentialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for credentials")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CredentialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), credentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"credentials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, credentialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in credential slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Credential) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no credentials provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(credentialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	credentialUpsertCacheMut.RLock()
	cache, cached := credentialUpsertCache[key]
	credentialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			credentialAllColumns,
			credentialColumnsWithDefault,
			credentialColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			credentialAllColumns,
			credentialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert credentials, could not build update column list")
		}

		ret := strmangle.SetComplement(credentialAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(credentialPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert credentials, could not build conflict column list")
			}

			conflict = make([]string, len(credentialPrimaryKeyColumns))
			copy(conflict, credentialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"credentials\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(credentialType, credentialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(credentialType, credentialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert credentials")
	}

	if !cached {
		credentialUpsertCacheMut.Lock()
		credentialUpsertCache[key] = cache
		credentialUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Credential record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Credential) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no Credential provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), credentialPrimaryKeyMapping)
	sql := "DELETE FROM \"credentials\" WHERE \"cred_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from credentials")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q credentialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no credentialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from credentials")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CredentialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), credentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"credentials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, credentialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from credential slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Credential) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCredential(ctx, exec, o.CredID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CredentialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CredentialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), credentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"credentials\".* FROM \"credentials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, credentialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CredentialSlice")
	}

	*o = slice

	return nil
}

// CredentialExists checks if the Credential row exists.
func CredentialExists(ctx context.Context, exec boil.ContextExecutor, credID []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"credentials\" where \"cred_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, credID)
	}
	row := exec.QueryRowContext(ctx, sql, credID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if credentials exists")
	}

	return exists, nil
}

// Exists checks if the Credential row exists.
func (o *Credential) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CredentialExists(ctx, exec, o.CredID)
}
